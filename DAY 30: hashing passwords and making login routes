So making passwords securely stored in a database was a task i had  to do and bcrypt makes it easier than i thought.

Read bcrypt Docs==>  https://www.npmjs.com/package/bcrypt

Here is the code on how to hash a password.

bcrypt.genSalt(10, function (err, salt) {
    if (err) return next(err);
    bcrypt.hash(user.password, salt, function (err, hash) {
      if (err) return next(err);
      user.password = hash;
      
      
  You will have to do some research to understand the salt han .hash method and how it works
  
  You might be wondering how will we convert the hashed password back into original when logging in here is the method.
  
  await bcrypt.compare(password, user.password);
  
  
  
  LOGIN ROUTES:
  
  
  router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findByCredentials(email, password);
    const token = await user.generateAuthToken();
   // user.status = "online";
    await user.save();
    res.cookie("jwtoken", token, {
      expires: new Date(Date.now() + 2589200000000),
      httpOnly: false,
      secure: false,
    });
    res.status(200).json(user);
  } catch (e) {
    res.status(400).json(e.message);
  }
});



.fidnbyCredentials method is as follows:

UserSchema.statics.findByCredentials = async function (email, password) {
  const user = await User.findOne({ email });
  if (!user) throw new Error("invalid email or password");

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) throw new Error("invalid email or password");
  return user;
};
  


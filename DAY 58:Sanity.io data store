Sanity is a platform for creating and working with structured content. Your content is stored in the cloud and can be distributed anywhere, for example on
a website or in an app.
tep 1: Install Sanity Studio
You start by setting up your content editing environment. It’s called Sanity Studio, and you can configure and customize it with JavaScript. It runs in the browser.
To develop locally, we need to run a development server so you can see your changes instantly.

Gotcha
To install Sanity Studio you'll first need to have node and npm installed.

How to install node and npm?

👉 To get started, run this in your command line:


This will take you through a setup process by guiding you through the following steps:


👉  Create an account. Select a login provider from the list of options, and confirm with Enter. After creating an account in the browser, come back to the command
line window.
👉  Choose an output path. Press Enter to accept the default path, or change it to fit your needs first.
👉  Wait a bit for the installation process to complete. When you get a Success! message, you're good to move on to the next step!! 🎉
Step 2: Run the Studio locally
Having installed the studio in the previous step, it’s time to start it up and run it in your browser!

👉 Enter the Studio's directory:

If you chose a custom output path, remember to change it respectively.

cd sanity-project

👉 Run this command within the Studio's folder:

npx @sanity/cli start

This will build the studio application and start a local development server so you can run the app in your browser. Once the build is complete, you can head over to 
http://localhost:3333.
You should now see the Sanity Studio running in your browser!

As you modify and save the code, the server will automatically rebuild the studio and refresh the browser.

You can stop your development server by pressing Ctrl-C in the terminal where the server is running.

Summary
At this point, we've set up the following:

Sanity account – you need it to access your projects.
Sanity project – a place for your content represented as documents, stored by Sanity in the cloud. A single Sanity account can have unlimited number of Sanity 
projects
.
Sanity Studio – a React app to edit and publish content. Connected to a Sanity project via APIs. For now, it is installed on your computer. In the next steps, we'll 
cover how to deploy it to the web and share it with
others.


##Create a schema and configure Sanity Studio
This step will get you started modeling your content by configuring your first schema for Sanity Studio.

Protip
👉  Look for the pointing finger emoji to find only the actionable paragraphs if you want to speedrun this guide!

What is Sanity Studio?
Sanity Studio is an application for creating, editing, and working with content. You can set it up, configure, and customize it with basic JavaScript. You can also 
extend it using React and a wide selection of helper libraries. While the studio is intentionally engineered to be simple to get started with, it has a lot of advanced 
functionality out of the box. It’s designed to get out of the way and let you add features as the need arises.

Give me more technical details about the studio!
File layout
.
├── README.md
├── config
├── node_modules
├── package.json
├── plugins
├── sanity.json
├── schemas
├── static
├── tsconfig.json
└── yarn.lock

The schemas folder is where you add your document types and define their fields.

In sanity.json you'll find the configuration details for your studio – such as which project and dataset (the collections of documents that make up your content)
it should connect to, and what plugins should be activated. We'll look more into these concepts later.

That’s pretty much what you need to know for now.

Deeper dive into the file structure
Defining your first document type
Let's build a simple content model for holding a collection of animals, real or not. Sanity Studio will automatically build a user interface from the schema where
you describe your content models.

A document type is similar to a “collection” if you’re used to NoSQL/document databases or a table if you know relational databases. In the JSON documents that the
Studio writes to, it will appear as a _type property. It’s very common to use this property to query for your content; for example *[_type == "animal"].

Let's make a studio that can hold a collection of animals, starting with recording their names.

To make your first document type, do the following:

👉  Create a new file inside of the schemas folder and call it animal.js

👉  Open animal.js and add the following code to it

export default {
  name: 'animal',
  type: 'document',
	title: 'Animal',
  fields: [
    {
      name: 'name',
      type: 'string',
      title: 'Name'
    }
  ]
}

Let’s unpack what’s happening here:

export default is how you make the following document type definition available when you later import it to schema.js
name: 'animal' tells the studio that the JSON gets "_type": "animal" added to it when you create a new document in the studio (yes, we know, there’s a lot of “type”
to keep track of, but bear with us)
The type: 'document' property tells the studio that it should make it possible to make new animal documents.
The title: 'Animal' defines what this document type is called in the studio UI. While it's common that title is simply the capitalized form of name, it doesn't have
to
be. "Furry companion" would be an equally appropriate value for title.
For fields you find an array of objects that describes the fields you’ll have available for this document type. In this case, objects with name, type, title in it.
Notice how it’s the same keys you have for the document type?
Inside the fields array, you find one JavaScript object in it with three keys. These describe what the first and only field is and its name. It might take some
getting
used to, but the value of name is what ends up as the key in the data that the Studio outputs. You will see an example of that later.
You should also take notice of the type. The value string tells the Studio what kind of input to put here. In this case, it's a single-line text input field. Sanity
Studio comes with a lot of built-in field types, including, but not limited to: number, datetime, image, array, and object.
👉  The next step is to import this document type definition into schema.js and add it to the array of types. Open schema.js and do the following:

import createSchema from "part:@sanity/base/schema-creator";
import schemaTypes from "all:part:@sanity/base/schema-type";

import animal from './animal' // import the file you just made

export default createSchema({
  name: "default",
  types: schemaTypes.concat([
		animal, // add the document type to this array
  ]),
});

👉  Now, you can save and run the command sanity start in your command line if you haven’t started it already. Head over to http://localhost:3333. If everything
went
as it should, you’ll see Animal
appearing to the left. Congrats, this is your first schema type!

Now you know the basics of what you need to know to be productive. We’ll be back and work more with fields types, but first, let’s look at how the Studio interacts
with the Content Lake to create and edit data.

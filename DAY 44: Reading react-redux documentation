Link to documentation:https://react-redux.js.org/introduction/getting-started


Main Points:

Why Use React Redux?
Redux itself is a standalone library that can be used with any UI layer or framework, including React, Angular, Vue, Ember, and vanilla JS. Although Redux and React 
are commonly used together, they are independent of each other. If you are using Redux with any kind of UI framework, you will normally use a "UI binding" library to
tie Redux together with your UI framework, rather than directly interacting with the store from your UI code.
              React Redux is the official Redux UI binding library for React. If you are using Redux and React together, you should also use React Redux to bind
these two libraries.To understand why you should use React Redux, it may help to understand what a "UI binding library" does.

Integrating Redux with a UI​
Using Redux with any UI layer requires the same consistent set of steps:

Create a Redux store
Subscribe to updates
Inside the subscription callback:
Get the current store state
Extract the data needed by this piece of UI
Update the UI with the data
If necessary, render the UI with initial state
Respond to UI inputs by dispatching Redux actions
While it is possible to write this logic by hand, doing so would become very repetitive. In addition, optimizing UI performance would require complicated logic.

The process of subscribing to the store, checking for updated data, and triggering a re-render can be made more generic and reusable. A UI binding library like
React Redux handlesthe store interaction logic, so you don't have to write that code yourself.


Reasons to Use React Redux​
It is the Official Redux UI Bindings for React​
While Redux can be used with any UI layer, it was originally designed and intended for use with React. There are UI binding layers for many other frameworks, but React
Redux is maintained directly by the Redux team. As the official Redux binding for React, React Redux is kept up-to-date with any API changes from either library, to
ensure that your React components behave asexpected. Its intended usage adopts the design principles of React - writing declarative components.

It Implements Performance Optimizations For You​ React is generally fast, but by default any updates to a component will cause React to re-render all of the 
components inside that part of the component tree. This does require work, and if the data for a given component hasn't changed, then re-rendering is likely some 
wasted effort because the requested UI output would be the same.
                   If performance is a concern, the best way to improve performance is to skip unnecessary re-renders, so that components only re-render when their 
 data has actually changed. React Redux implements many performance optimizations internally, so that your own component only re-renders when it actually needs to.In
 addition, by connecting multiple components in your React component tree, you can ensure that each connected component only extracts the specific pieces of data from
 the store state that are needed by that component. This means that your own component will need to re-render less often, because most of the time those specific
 pieces of data haven't changed.
 
Community Support​
As the official binding library for React and Redux, React Redux has a large community of users. This makes it easier to ask for help, learn about best practices, use libraries that build on top of React Redux, and reuse your knowledge across different applications.
